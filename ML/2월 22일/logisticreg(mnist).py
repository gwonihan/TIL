# -*- coding: utf-8 -*-
"""9.LogisticReg(mnist).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HUMp8JvrFxGVpQBs2o4znetLtkdDmllX
"""

import numpy as np
from sklearn.datasets import fetch_openml
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import LogisticRegression
import pickle
import matplotlib.pyplot as plt

DATA_PATH = '/content/drive/MyDrive/Colab Notebooks/data/'

# mnist 데이터를 다운로드하고 나중에 사용하기 위해 저장해 둔다.
# 시간이 오래 걸리기 때문.
# mnist = fetch_openml('mnist_784')
# with open(DATA_PATH + 'mnist.pkl', 'wb') as f:
#        pickle.dump(mnist, f)

# 저장된 mnist 데이터를 읽어온다.
with open(DATA_PATH + 'mnist.pkl', 'rb') as f:
        mnist = pickle.load(f)

print(mnist.keys())

# 데이터가 많아 시간이 오래걸리므로, 앞 부분 2000개만 분석한다.
# mnist['data'] 숫자의 범위를 변환한다 (표준화) : 0 ~ 255 --> 0 ~ 1.0
x_feat = np.array(mnist['data'][:1000]) / 255
y_target = np.array(mnist['target'][:1000])

# n-번째 손글씨 이미지를 확인해 본다.
n = 0
img = x_feat[n].reshape(28,28)
print('\nclass =', y_target[n])
plt.imshow(img)
plt.show()

# 학습, 시험 데이터 분리
x_train, x_test, y_train, y_test = train_test_split(x_feat, y_target, test_size=0.2)

params = [{'C': [0.1, 0.5, 1.0]}]
model = LogisticRegression(penalty='l2', max_iter=500)
grid = GridSearchCV(estimator=model, param_grid=params, cv=5, refit=True)
grid.fit(x_train, y_train)

# 최적 모델로 시험 데이터의 성능을 평가한다.
best_model = grid.best_estimator_

print("\n최적 파라메터 =", grid.best_params_)
print("시험 데이터 정확도 = {:.4f}".format(best_model.score(x_test, y_test)))

# 잘못 분류한 이미지 몇개를 확인해 본다.
# 어떤 이미지를 잘 맞추지 못할까? 사람이라면 아래 이미지를 잘 맞출 수 있을까?
y_pred = best_model.predict(x_test)

n_sample = 10
miss_cls = np.where(y_test != y_pred)[0]
miss_sam = np.random.choice(miss_cls, n_sample)

fig, ax = plt.subplots(1, n_sample, figsize=(12,4))
for i, miss in enumerate(miss_sam):
    x = x_test[miss] * 255  # 표준화 단계에서 255로 나누었으므로, 여기서는 곱해준다.
    x = x.reshape(28, 28)   # 이미지 확인을 위해 (28 x 28) 형태로 변환한다.
    ax[i].imshow(x)
    ax[i].axis('off')
    ax[i].set_title(str(y_test[miss]) + ' / ' + str(y_pred[miss]))

