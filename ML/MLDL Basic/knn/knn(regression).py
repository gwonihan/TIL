# -*- coding: utf-8 -*-
"""knn(regression).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1as5FfJp861GKchyhlg_eOU2GPVvpm9B-
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.neighbors import KNeighborsRegressor

x = np.array([1.25, 3.52, 3.0, 4.13, 6.51, 6.27, 7.3, 8.42, 8.81,
            10.14,10.68,12.6 , 13.42, 14.01, 14.82, 15.96, 17.77, 17.85]).reshape(-1,1)

y = np.array([ 5.64,  2.36, 11.08,  6.62,  9.18, 11.91,  5.61,  7.75, 12.16,
              18.18, 18.73, 20.43, 14.86, 26.75, 29.9 , 20.32, 25.04, 31.59])

x_test = np.array([ 1.98,  4.16,  3.43,  4.49,  6.51,  6.76,  7.31,  8.55,  9.69,
                    10.52, 10.85, 13.29, 13.63, 14.09, 15.28, 16.94, 18.01, 18.7 ]).reshape(-1,1)

plt.scatter(x, y, c='red', s=100)
plt.xticks(x, rotation=90)
plt.show()

# KNN regressor를 생성한다.
knn = KNeighborsRegressor(n_neighbors=5, weights='uniform')
knn.fit(x, y)

# y를 추정한다.
y_hat = knn.predict(x_test)

# 추정된 y를 시각화하고, 육안으로 성능을 확인한다.
plt.scatter(x, y, c='red', s=100, alpha=0.7)
plt.plot(x, y_hat, marker='o', c='blue', alpha=0.7, 
         drawstyle="steps-post")
plt.show()

# x = 12.0일 때 y의 추정치는?
y_hat = knn.predict(np.array([12.0]).reshape(-1,1))
print("\nx = 12.0 --> predicted y = {:.4f}".format(y_hat[0]))

