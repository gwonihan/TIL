# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BtCNR7OevSzUI5DIoRp8377JKOoCQrT6
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB, MultinomialNB

# income 데이터를 읽어온다
# https://www.kaggle.com/wenruliu/adult-income-dataset?select=adult.csv

income = pd.read_csv('income.csv')
income.head()

income.info()

list(income.columns[income.dtypes == 'object'])

# categorical feature를 숫자로 변환한다.
cat_features = list(income.columns[income.dtypes == 'object'])

for c in cat_features:
    income[c] = pd.Categorical(income[c]).codes

income.head()

income.info()

income.isnull().sum()

income.fillna(method='pad', inplace=True)

# Train 데이터 세트와 Test 데이터 세트를 구성한다
x = np.array(income)[:, :-1]
y = np.array(income)[:, -1]

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2)

# categorical feature를 multinomial naive bayes로 학습한다.
# --------------------------------------------------------
cat_n = [1, 3, 5, 6, 7, 8, 9, 13]
catx_train = x_train[:, cat_n]
catx_test = x_test[:, cat_n]

# Multinomial model로 categorical Train 데이터 세트를 학습한다.
model_m = MultinomialNB(alpha=1.0)  # alpha = 1.0 : Laplace smoothing (default)
model_m.fit(catx_train, y_train)

# gaussian feature를 gaussian naive bayes로 학습한다.
# --------------------------------------------------
gau_n = [0, 2, 4, 10, 11, 12]
gaux_train = x_train[:, gau_n]
gaux_test = x_test[:, gau_n]

# Gaussian model로 gaussian Train 데이터 세트를 학습한다.
model_g = GaussianNB()
model_g.fit(gaux_train, y_train)

# 시험 데이터를 이용하여 정확도를 측정한다. 시험데이터도 categorical과 gaussian으로
# 분리돼 있다. 각각의 모형에 따라 확률을 추정한다.
cat_prob = model_m.predict_proba(catx_test)
gau_prob = model_g.predict_proba(gaux_test)

A = model_m.predict_proba(catx_train)
B = model_g.predict_proba(gaux_train)

A_test = model_m.predict_proba(catx_test)
B_test = model_g.predict_proba(gaux_test)

x2_train = np.concatenate((A, B), axis=1)
y2_train = y_train
# print(x2_train.shape, y_train.shape)

x2_test = np.concatenate((A_test, B_test), axis=1)
y2_test = y_test
# print(x2_test.shape, y_test.shape)

# train data가 실수값 -> GaussianNB 사용
model = GaussianNB()
model.fit(x2_train, y2_train)


score = model.score(x2_test, y2_test)
print(f'{score:.4f}')