# -*- coding: utf-8 -*-
"""4-3.popcorn(word2vec).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WkjjuPd2Ix1NKSQSm5SQxaZrQDgJ-yj3
"""

from sklearn.model_selection import train_test_split
from gensim.models import word2vec
from sklearn.linear_model import LogisticRegression
import pickle
import numpy as np
import nltk
from nltk.tokenize import word_tokenize
nltk.download('punkt')

DATA_PATH = '/content/drive/My Drive/Colab Notebooks/data/'

# 학습 데이터를 읽어온다.
with open(DATA_PATH + 'popcorn.pkl', 'rb') as f:
    x_text, _, y_target, _ = pickle.load(f)

word_tok = [word_tokenize(x) for x in x_text]

num_features = 100
min_word_count = 40
context = 10
downsampling = 1e-3  # The threshold for configuring which higher-frequency words are randomly 
                     # downsampled, useful range is (0, 1e-5)

model = word2vec.Word2Vec(word_tok,
                          sg = 1,                 # 1 : skipgram, 0 : CBOW
                          negative = 1,           # SGNS (skipgram with netative sampling)
                          size = num_features,
                          min_count = min_word_count,
                          window = context,
                          sample = downsampling)

# model_name = '100features_40minwords_10context'
# model.save(DATA_PATH + model_name)

model.wv['stuff']

# 각 문장의 feature vector를 생성한다.
x_feat = []
for sent in word_tok:
    sent_feat = np.zeros((num_features), dtype=np.float32)

    n = 0
    for word in sent:
        if word in model.wv.index2word:
            sent_feat += model.wv[word]
            n += 1

    x_feat.append(sent_feat / n)   # 평균 값 저장
x_feat = np.array(x_feat)
x_feat.shape

x_feat[0]

# 학습 데이터와 시험 데이터로 분리한다.
x_train, x_eval, y_train, y_eval = train_test_split(x_feat, y_target, test_size=0.2)
x_train.shape, x_eval.shape, y_train.shape, y_eval.shape

lgs = LogisticRegression(class_weight = 'balanced', max_iter=500)
lgs.fit(x_train, y_train)

print('Accuracy: {:.4f}'.format(lgs.score(x_eval, y_eval)))

