# -*- coding: utf-8 -*-
"""DTree(boston).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mLXa9B8BiVIGFxQUu7ScGWMTtlLLqDIi
"""

import pandas as pd
import numpy as np
from sklearn.datasets import load_boston
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

boston = load_boston()
df = pd.DataFrame(boston.data, columns = boston.feature_names)
df['PRICE'] = boston.target
df.head()

x_train, x_test, y_train, y_test = train_test_split(boston.data, boston.target, test_size = 0.2)
x_train.shape

d_max = 20
r2 = []
for depth in range(1, d_max):
    dt = DecisionTreeRegressor(max_depth=depth)
    dt.fit(x_train, y_train)

    r2.append(dt.score(x_test, y_test))

opt_depth = np.argmax(r2) + 1
print("optimal depth = ", opt_depth)

# 최종 모델
model = DecisionTreeRegressor(max_depth=opt_depth)
model.fit(x_train, y_train)

# 최종 모델의 성능 확인

# R2 : 방법-1
print(" R2 = {:.4f}".format(model.score(x_test, y_test)))

# R2 : 방법-2
y_pred = model.predict(x_test)
print(" R2 = {:.4f}".format(r2_score(y_test, y_pred)))

# MSE
print("MSE = {:.4f}".format(mean_squared_error(y_test, y_pred)))

